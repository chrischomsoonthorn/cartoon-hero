/*Colour scheme:
	Black: #0C120C;
	Red: #C20114;
	Grey: #6D7275;
	Bluegrey: #C7D6D5;
	Magnolia (grey): #ECEBF3;
*/

body{
	margin: 0;
}

header{
	background-color: #C7D6D5;
	text-align: center;
	padding: 50px 50px 50px;
	position: relative;
}

/*This creates a border type effect at the bottom of the header*/
header:after{
	content:"";
	position: absolute;
	background-color: #C20114; 
	left: 0;
	right: 0;
	bottom: 0px;
	height: 20px;
}

h1{
	color: #0C120C;
	font-size: 70px;
	font-family: 'Roboto Slab', serif;
}

main{
	margin: 10px;
}

h2{
	color: #0C120C;
	font-size: 35px;
	font-family: 'Roboto Slab', serif;
}

.cool{
	
	/*By default By default p tags are block elements, which means they take 100% of the parent width.

	You can change their display property with:

	#container p {
	   display:inline-block;
	}
	But it puts the elements side by side.

	To keep each element on its own line you can use:

	#container p {
	   clear:both;
	   float:left;
	}*/
	

	display: inline-block;
	box-sizing: border-box;
	background-color: green;
	color: white;
	transition: background-color 1s;
}

/*I was a little confused by this at first but cool.red gives me the ability to keep the attributes of 'cool' whilst also applying a new attribute which is 'red'. When referencing cool.red I should just not put the full stop.*/

.cool.red{
	background-color: red;
}

.font1{
	font-size: 20px;
	transition: font-size 1s
}

.font1.large{
	font-size: 50px;
	transition: font-size 1s
}

.left1{
	position: relative;
	background-color: #ECEBF3;
	width: 49.9%;
	height: 700px;
	left: 0;
	border: solid black 1px;
	float: left;
	margin:0;
	box-sizing: border-box;
}

.right1{
	position: relative;
	background-color: #C7D6D5;
	width: 49.9%;
	height: 700px;
	right: 0;
	border: solid black 1px;
	float: right;
	margin:0;
	box-sizing: border-box;
}

.ground1{
	background-color: green;
	position: absolute;
	bottom: 0px;
	left: 0px;
	width: 100%;
	height: 20px;
}

.rocket1{
	position: absolute;
	left: 50%;
	bottom: 10px;
	width: 20px;
	height: 200px;
	background-color: blue;
	transition: bottom 10000ms;
}

body.bodystate1 .rocket1{
	transition: none;
}

body.bodystate3 .rocket1, body.bodystate4 .rocket1{
	bottom: 2000px;
}

.state1, .state2, .state3, .state4, .state5{
	display: none;
	text-align: center;
	position: relative;
	top: 30%;
	margin: 0;
}

/*The way the below works is that when the parent box, in this case the body, is in any of the states below, then the corresponding state next to it will activate. So for instance, when the body is in bodystate1, state1 will be displayed as a block.=, and so on.*/
body.bodystate1 .state1{display: block;}
body.bodystate2 .state2{display: block;}
body.bodystate3 .state3{display: block;}
body.bodystate4 .state4{display: block;}
body.bodystate5 .state5{display: block;}


a.launch1{

}